/* =====================================
=== FIMREG - Fast Image Registration ===
========================================

Written by Roelof Berg, Berg Solutions (rberg@berg-solutions.de) with support from
Lars Koenig, Fraunhofer MEVIS (lars.koenig@mevis.fraunhofer.de) Jan Ruehaak, Fraunhofer
MEVIS (jan.ruehaak@mevis.fraunhofer.de).

THIS IS A LIMITED RESEARCH PROTOTYPE. Documentation: www.berg-solutions.de/fimreg.html

------------------------------------------------------------------------------

Copyright (c) 2014, Roelof Berg
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

* Neither the name of the owner nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

----------------------------------------------------------------------------*/

//Entry point called from c++ code generated by matlab coder
//(As if this method would be directly called from an .m file)

//precompiled header (MUST BE THE FIRST ENTRY IN EVERY CPP FILE)
#include "stdafx.h"

#include "matlab_startSsdOnTarget.h"
#include "HPRPCCommon.h"
/** Common header for both CHPRPCRequestCalcSSDJacHess and virtually 'CHPRPCRequestCalcSSD' because parameters are the same */
#include "CHPRPCRequestCalcSSDJacHess.h"
#include "CHPRPCConnection.h"

//Some global stuff (global because matlab generates global C code)
extern vector<CHPRPCConnection*> g_CHPRPCConnection;
extern uint32_t guCoreAmount;
vector<CHPRPCRequestCalcSSDJacHess*> g_Request_SSDOnTarget;

/**
* Trigger (async/nonblocking) remote calculation of the function value (SSD).
* This will be executed during Armijo Line Search. Calculation of gradient (JD) and Hessian (JD2) will
* be skipped here, for line search this can be omitted.
*/
void matlab_c_start_ssdOnTarget(uint32_T DSPIdx, const real32_T w[3], const uint32_T Level)
{
	const string csCmdLogName = "Calc_SSD";	//For logging purposes only
	CHPRPCConnection& oConnection = *(g_CHPRPCConnection.at(DSPIdx-1));
	CHPRPCRequestCalcSSDJacHess* pRequest= new CHPRPCRequestCalcSSDJacHess(oConnection, CHPRPCRequestCalcSSDJacHess::CALC_SSD_ONLY);

	//Ensure we have enough vector space
	while(g_Request_SSDOnTarget.size()<DSPIdx)
	{
		g_Request_SSDOnTarget.push_back(NULL);
	}

	//Remember request (connection between independently from matlab generated entry points).
	//Request will be deleted in matlab_JacobianOnTarget.cpp (this also ensured the data to
	//be valid during the async/nonblocking send operation).
	if(NULL != g_Request_SSDOnTarget.at(DSPIdx-1))
	{
		throw HPRPCProtocolFlowException();
	}
	g_Request_SSDOnTarget.at(DSPIdx-1) = pRequest;

	//Send request to remote DSP (will NOT block)
	pRequest->AssignValuesToBeSent(w, (uint16_t)guCoreAmount, (uint16_t)Level);
	pRequest->StartSendToOtherPeer(
		#if defined(_TRACE_HPRPC_)
		csCmdLogName
		#endif
		);
}
