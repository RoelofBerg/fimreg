/*
 * master.cfg
 *
 * Memory Map and Program intiializations
 *
 * Copyright (C) 2010-2011 Texas Instruments Incorporated - http://www.ti.com/ 
 *  
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions 
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the   
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

/*
 *   @file  master.cfg
 *
 *   @brief   
 *      Memory Map and Program intiializations
 *
 */
 
/********************************************************************************************************************
*  Specify all needed RTSC Modules and configure them.																*
********************************************************************************************************************/

var Memory  =   xdc.useModule('xdc.runtime.Memory');
var Log     =   xdc.useModule('xdc.runtime.Log');		//Necessary ?
var Error     = xdc.useModule('xdc.runtime.Error');		//Necessary ?
var Diags       = xdc.useModule('xdc.runtime.Diags');
var xdc_runtime_Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var Startup     =   xdc.useModule('xdc.runtime.Startup');
var System      =   xdc.useModule('xdc.runtime.System');
var SysStd      =   xdc.useModule('xdc.runtime.SysStd');

/* Required if using System_printf to output on the console */
System.SupportProxy     =   SysStd;

var BIOS    =   xdc.useModule('ti.sysbios.BIOS');
var Task    =   xdc.useModule('ti.sysbios.knl.Task');
var Clock   =   xdc.useModule ('ti.sysbios.knl.Clock');
var Sem	= xdc.useModule ('ti.sysbios.knl.Semaphore');
var Hwi	= xdc.useModule ('ti.sysbios.hal.Hwi');
var Ecm = xdc.useModule ('ti.sysbios.family.c64p.EventCombiner');
/* var BiosCache = xdc.useModule('ti.sysbios.hal.Cache');	ToDo: necessary ?*/ 
var HeapBuf =   xdc.useModule('ti.sysbios.heaps.HeapBuf');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Exc = xdc.useModule('ti.sysbios.family.c64p.Exception');
var Cache       =   xdc.useModule('ti.sysbios.family.c66.Cache');
var CpIntc = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');

/* don't use fix for old silicon bug */
Cache.atomicBlockSize=0;

/* rbe test */
Exc.exceptionHook = '&myExceptionHook';
Exc.internalHook = '&myInternalHook';
var sem0Params = new Sem.Params();
sem0Params.instance.name = "pcie_semaphore";
sem0Params.mode = Sem.Mode_BINARY;
Program.global.pcie_semaphore = Sem.create(null, sem0Params);

/* Enable BIOS Task Scheduler */
BIOS.taskEnabled			=   true;

/*
** Allow storing of task names. By default if you name a task with a friendly display name it will not be saved
** to conserve RAM. This must be set to true to allow it. We use friendly names on the Task List display.
*/
//Defaults.common$.namedInstance = true; 
Task.common$.namedInstance = true;

/*
 * Enable Event Groups here and registering of ISR for specific GEM INTC is done
 * using EventCombiner_dispatchPlug() and Hwi_eventMap() APIs
 */

Ecm.eventGroupHwiNum[0] = 7;
Ecm.eventGroupHwiNum[1] = 8;
Ecm.eventGroupHwiNum[2] = 9;
Ecm.eventGroupHwiNum[3] = 10;

/*
** Create a Heap. RBE TODO: REDUCE SIZE IF POSSIBLE
*/
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x08000000; /*ToDo: reduce ! What about e.g. 0x300000; ?*/
heapMemParams.sectionName = "systemHeapMaster";
Program.global.heap0 = HeapMem.create(heapMemParams);
Memory.defaultHeapInstance = Program.global.heap0;

/* Load the PDK packages */
var Csl 					    = 	xdc.useModule('ti.csl.Settings');
var Pa 							= 	xdc.useModule('ti.drv.pa.Settings');
var Cppi                        =   xdc.loadPackage('ti.drv.cppi');     
var Qmss                        =   xdc.loadPackage('ti.drv.qmss');


/* Load and configure the IPC packages */
var MessageQ     = xdc.useModule('ti.sdo.ipc.MessageQ');
var Ipc          = xdc.useModule('ti.sdo.ipc.Ipc');
var HeapBufMP    = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
var MultiProc    = xdc.useModule('ti.sdo.utils.MultiProc');

Program.global.CORE_AMOUNT = 8;
MultiProc.setConfig(null, ["CORE0", "CORE1", "CORE2", "CORE3", "CORE4", "CORE5", "CORE6", "CORE7"]);

/* Synchronize all processors (this will be done in Ipc_start) */
Ipc.procSync = Ipc.ProcSync_ALL;

/* Shared Memory base address and length */
var SHAREDMEM           = 0x0c200000;
var SHAREDMEMSIZE       = 0x00200000;

SharedRegion.setEntryMeta(0,
    { base: SHAREDMEM, 
      len:  SHAREDMEMSIZE,
      ownerProcId: 0,
      isValid: true,
      name: "MSMCSRAM_IPC",
    });
    

/* rbe todo: Can we remove the following two lines ? */
Memory.defaultHeapSize = 0x100000;
Program.heap = 0x100000;

Program.sectMap[".vecs"]       = {loadSegment: "MSMCSRAM_MASTER", loadAlign:1024};	/*necessary ?*/
Program.sectMap[".switch"]     = {loadSegment: "MSMCSRAM_MASTER", loadAlign:8};		/*necessary ?*/
Program.sectMap[".cio"]        = {loadSegment: "L2SRAM", loadAlign:8};
Program.sectMap[".args"]       = {loadSegment: "L2SRAM", loadAlign:8};
Program.sectMap[".cppi"]       = {loadSegment: "L2SRAM", loadAlign:16};
Program.sectMap[".qmss"]       = {loadSegment: "L2SRAM", loadAlign:16};
Program.sectMap[".resmgr_memregion"] = {loadSegment: "L2SRAM", loadAlign:128};	/* QMSS descriptors region 	*/
Program.sectMap[".resmgr_handles"] = {loadSegment: "L2SRAM", loadAlign:16};	/* CPPI/QMSS/PA Handles			*/
Program.sectMap[".resmgr_pa"]	= {loadSegment: "L2SRAM", loadAlign:8};		/* PA Memory					*/
Program.sectMap[".far:PICTUREBUFF"]  = {loadSegment: "DDR3", loadAlign: 128};

Program.sectMap["systemHeapMaster"] = "DDR3";
Program.sectMap[".cinit"]   = "MSMCSRAM_MASTER";
Program.sectMap[".const"]   = "MSMCSRAM_MASTER";
Program.sectMap[".text"]    = "MSMCSRAM_MASTER";
Program.sectMap[".far"] 	= 	"L2SRAM";
Program.sectMap[".bss"]		=	"L2SRAM";
Program.sectMap[".rodata"] 	= 	"L2SRAM";
Program.sectMap[".neardata"]= 	"L2SRAM";
Program.sectMap[".code"]	=	"L2SRAM";
Program.sectMap[".data"]	=	"L2SRAM";
Program.sectMap[".sysmem"]  = "L2SRAM";
Program.sectMap[".defaultStackSection"] = "L2SRAM";			/*necessary ? (we once removed it, compile was ok) */
Program.sectMap[".stack"]               = "L2SRAM";			/*necessary ? (we once removed it, compile was ok) */
Program.sectMap[".plt"]                 = "L2SRAM";			/*necessary ? (we once removed it, compile was ok) */
Program.sectMap["platform_lib"] 	= 	"L2SRAM";

/*Program.sectMap["sharedL2"] = "DDR3"; 
Program.sectMap[".init_array"] 	= 	"DDR3";
Program.sectMap[".fardata"] = 	"DDR3";
Program.sectMap[".args"] 	= 	"DDR3";
Program.sectMap[".DbgSection"]  = "L2SRAM";
Program.sectMap[".far:taskStackSection"] = "L2SRAM";
*/

/* TODO: REMOVE ALL OBSOLETE ENTRIES (E.G. RELATED TO NDK IF LEFT) !!! */

/********************************************************************************************************************
* Define hooks and static tasks  that will always be running.               										*
 ********************************************************************************************************************/

/* 
** Register an EVM Init handler with BIOS. This will initialize the hardware. BIOS calls before it starts. 
**
** If yuo are debugging with CCS, then this function will execute as CCS loads it if the option in your 
** Target Configuraiton file (.ccxml) has the option set to execute all code before Main. That is the 
** default.
*/
Startup.lastFxns.$add('&EVM_init');

/* Create the stack Thread Task for our application.  */
var tskMainThread        =  Task.create("&master_main");
tskMainThread.stackSize  = 0x2000;
tskMainThread.priority   = 0x5;
tskMainThread.instance.name = "master_main";

var tskSlaveThread       = Task.create("&slave_main");
tskSlaveThread.stackSize = 0x2000;
tskSlaveThread.priority  = 0x5;
tskSlaveThread.instance.name = "slave_main";

/* Load the resulting binary to this entry point using dsp_loader.exe (must be consistent to the packages dspc8681dspreg memory configuration) */
Program.sectMap[".text:_c_int00"] = new Program.SectionSpec();
Program.sectMap[".text:_c_int00"].loadAddress = 0x0C000000;		/* ToDo: Can we place this into L2SRAM ? (also change .text above and dsploader script) */

/* Fixed start in memory for DMA communication used by HPRPC */
Program.global.BUFSIZE_HPRPC_DMA = 0x4000004;	/* 32 MB max HPRPC packet size plus four bytes PCIe frame length descriptor */
Program.sectMap[".hprpcDMA"] = new Program.SectionSpec();
Program.sectMap[".hprpcDMA"].loadAddress = 0x80000000;		/*Beginning of DDR3 ram. ToDo: Can we use faster memory ?*/
/* Keep in sync with host application pci_server.cpp::DMA_MEMORY_BASE and BUFSIZE_HPRPC_DMA

/* Fixed start in memory for DMA communication used by the virtual UART */
Program.global.CFG_SHM_CONSOLE_OUTSZ = 0x340;		//Bytes of output buffer for the virtual console
Program.global.CFG_SHM_CONSOLE_INSZ = 0x20;		//Bytes of input buffer for the virtual console
/* Resulting memory usage: 0x20 bytes for the protocol struct plus CFG_SHM_CONSOLE_OUTSZ plus CFG_SHM_CONSOLE_INSZ */
Program.sectMap[".vuartDMA"] = new Program.SectionSpec();
Program.sectMap[".vuartDMA"].loadAddress = 0x00800800;		/*L2SRAM ram*/

/*
** Configure this to turn on the CPU Load Module for BIOS.
**
*/
/*
var Load       =   xdc.useModule('ti.sysbios.utils.Load');
Load.common$.diags_USER4 = Diags.ALWAYS_ON;
*/

